第一眼看到题目想到得是排序，但是在排序后如果拿出得两个值不同又需要重新排序，复杂度感觉有点高，就没有进行尝试，然后看了一下数据发现0 < stones[i] <= 1000。
发现可以定义一个vector<int>mp(1005),用来存贮每个数字出现得次数，然后从1000从后往前遍历，定义一个标志位flag 和 一个答案value,当flag == 0 && mp[i]%2==0
时，说明这样得石头是偶数，最后都会消失，继续往前遍历，当mp[i]%2==1时，两两消失，最后还会剩下一个，这时flag置为1，value = i。往前遍历，当遇到mp[i] != 0时
这时flag = 1, value 位之前剩下得一个石头，mp[i] != 0, 这时用value -= i, 判断value 是否小于等于i, 用while循环进行相减，当value <= i || mp[i] == 0时跳出
判断value是否大于i，从而判断是那种情况跳出，value大于i说明mp[i] == 0了，这时continue,继续向前找，或者value小于等于i跳出，这时mp[value]++,再来判断mp[i]%2
是否等0，等于0时，将flag，value重新置为0，否则flag = 1，value = i，然后向前遍历，最后跳出循环，value即为所求答案

* c++[group1-c++]

```c++[group1-c++]

class Solution {
public:
    int lastStoneWeight(vector<int>& stones) {
        vector<int> mp(1005);
        for(int i = 0; i < stones.size(); i++) {
            mp[stones[i]]++;
        }
        int flag = 0;
        int value = 0;
        for(int i = 1000; i >= 0; i--) {
            if(flag && mp[i] != 0) {
               int k = value - i;
               mp[i]--;
               while(k > i && mp[i] != 0) {
                   mp[i]--;
                   k -= i;
               }
                if(k > i) {
                    value = k;
                    continue;
                }else {
                    mp[k]++;
                }
                if(mp[i] % 2 == 0) {
                    value = 0;
                    flag = 0;
                    continue;
                }else {
                    flag = 1;
                    value = i;
                }
            }else if(mp[i] % 2 == 1) {
                value = i;
                flag = 1;
            } 
        }
        return value;
    }
};

```

![2.jpg](https://pic.leetcode-cn.com/1609295432-ZtJpxW-2.jpg)

